#include "../PixelLighting_PS.h"

// main関数
PS_OUTPUT main( PS_INPUT PSInput )
{
	PS_OUTPUT PSOutput ;
	float4 TextureDiffuseColor ;
	float4 TextureSpecularColor ;
	float4 ToonSpecularGradColor ;
	float4 ToonDiffuseGradColor ;
	float4 ToonSphereMapColor ;
	float4 ToonRGBtoVMaxRGBVolumeColor ;
	
	float DiffuseAngleGen ;
	float4 TotalDiffuse ;
	float4 TotalSpecular ;
	float4 TotalLightDiffuse ;
	float3 TotalAmbient ;
	float TotalAngleGen ;
	float Temp ;
	float3 TempF3 ;
	float4 TempF4 ;
	float3 Normal ;
	float3 V_to_Eye ;
	float3 VNrm ;
	float3 VTan ;
	float3 VBin ;
	float3 lLightTemp ;
	float lLightDistancePow2 ;
	float lLightGen ;
	float3 lLightDir ;
	float lLightDirectionCosA ;
	float3 ShadowRate ;
	float ShadowGen ;

#if SHADOWMAP
	float2 DepthTexCoord ;
	float4 TextureDepth ;
//	float4 variance_md_p_pmax ;
#endif
	
#if SUBTEXTUREMODE != 0
	float4 SubTextureColor;
#endif  // SUBTEXTUREMODE != 0

	// 接線・従法線・法線を正規化
	VNrm = normalize( PSInput.VNormal ) ;
#ifdef BUMPMAP
	VTan = normalize( PSInput.VTan ) ;
	VBin = normalize( PSInput.VBin ) ;
#endif // BUMPMAP

#ifdef BUMPMAP
	// 頂点座標から視点へのベクトルを接底空間に投影した後正規化して保存
	TempF3.x = dot( VTan, -PSInput.VPosition.xyz ) ;
	TempF3.y = dot( VBin, -PSInput.VPosition.xyz ) ;
	TempF3.z = dot( VNrm, -PSInput.VPosition.xyz ) ;
	V_to_Eye = normalize( TempF3 ) ;
#else // BUMPMAP
	// 頂点座標から視点へのベクトルを正規化
	V_to_Eye = normalize( -PSInput.VPosition ) ;
#endif // BUMPMAP

	// 法線の準備
	#if BUMPMAP
		// 法線の 0〜1 の値を -1.0〜1.0 に変換する
		Normal = ( tex2D( NormalMapTexture, PSInput.TexCoords0_1.xy ).rgb - cfZeroHalfOneTwo.y ) * cfZeroHalfOneTwo.w ;
	#else // BUMPMAP
		Normal = normalize( PSInput.VNormal ) ;
	#endif // BUMPMAP

	// ディフューズテクスチャカラーを取得
	TextureDiffuseColor = tex2D( DiffuseMapTexture, PSInput.TexCoords0_1.xy ) ;
	
#ifdef INVERSE_COLOR
	TextureDiffuseColor.rgb = 1.0f - TextureDiffuseColor.rgb;
#endif

#ifdef USE_SPE
	#ifdef USE_SPETEX
	// デスペキュラテクスチャカラーを取得
	TextureSpecularColor = tex2D( SpecularMapTexture, PSInput.TexCoords0_1.xy ) ;
	#endif // USE_SPETEX
#endif // USE_SPE

#if SUBTEXTUREMODE != 0
	// サブテクスチャカラーを取得
	SubTextureColor = tex2D( SubTexture, PSInput.TexCoords0_1.zw );
#endif  // SUBTEXTUREMODE != 0

	// サブテクスチャカラーとディフューズテクスチャカラーの掛け合わせ
#if SUBTEXTUREMODE == 1  // αブレンド( MV1_LAYERBLEND_TYPE_TRANSLUCENT + 1 )
	TextureDiffuseColor.rgb = lerp( TextureDiffuseColor.rgb, SubTextureColor.rgb, SubTextureColor.a );
#endif // SUBTEXTUREMODE == 1

#if SUBTEXTUREMODE == 2  // 加算( MV1_LAYERBLEND_TYPE_ADDITIVE + 1 )
	TextureDiffuseColor.rgb += SubTextureColor.rgb;
#endif // SUBTEXTUREMODE == 2

#if SUBTEXTUREMODE == 3  // 乗算( MV1_LAYERBLEND_TYPE_MODULATE + 1 )
	TextureDiffuseColor.rgb *= SubTextureColor.rgb;
#endif // SUBTEXTUREMODE == 3

#if SUBTEXTUREMODE == 4  // 乗算×２( MV1_LAYERBLEND_TYPE_MODULATE2 + 1 )
	TextureDiffuseColor.rgb *= SubTextureColor.rgb * 2.0f;
#endif // SUBTEXTUREMODE == 4

	// ライトを使う場合 *******************************************************************( 開始 )

	// ディフューズカラーとスペキュラカラーの蓄積値を初期化
	TotalDiffuse = cfZeroHalfOneTwo.x ;
#ifdef USE_SPE
	TotalSpecular = cfZeroHalfOneTwo.x ;
#endif // USE_SPE
	
#if TOON
	#if TOON == 1
		TotalLightDiffuse = cfZeroHalfOneTwo.x ;
	#else // TOON == 1
		TotalAmbient = cfZeroHalfOneTwo.x ;
		TotalAngleGen = cfZeroHalfOneTwo.x ;
	#endif
#endif // TOON

	#if	SHADOWMAP
		// 頂点のテクスチャ座標値が範囲内の場合のみ処理する
		if( PSInput.ShadowMap1Pos_ShadowMap3PosX.x < -1.0f || PSInput.ShadowMap1Pos_ShadowMap3PosX.x > 1.0f ||
		    PSInput.ShadowMap1Pos_ShadowMap3PosX.y < -1.0f || PSInput.ShadowMap1Pos_ShadowMap3PosX.y > 1.0f ||
		    PSInput.ShadowMap1Pos_ShadowMap3PosX.z <  0.0f || PSInput.ShadowMap1Pos_ShadowMap3PosX.z > 1.0f )
		{
			ShadowRate.x = 1.0f;
		}
		else
		{
			// 深度テクスチャの座標を算出
			// PSInput.ShadowMap1Pos_ShadowMap3PosX.xy は -1.0f 〜 1.0f の値なので、これを 0.0f 〜 1.0f の値にする
			DepthTexCoord.x = ( PSInput.ShadowMap1Pos_ShadowMap3PosX.x + 1.0f ) / 2.0f;

			// yは更に上下反転
			DepthTexCoord.y = 1.0f - ( PSInput.ShadowMap1Pos_ShadowMap3PosX.y + 1.0f ) / 2.0f;

			// 深度バッファテクスチャから深度を取得
			TextureDepth = tex2D( ShadowMap1Texture, DepthTexCoord );

			// テクスチャに記録されている深度( +補正値 )よりＺ値が大きかったら奥にあるということで減衰率を最大にする
			ShadowRate.x = smoothstep( PSInput.ShadowMap1Pos_ShadowMap3PosX.z - cfShadowMap1_DAdj_Grad_Enbl0_1.y, PSInput.ShadowMap1Pos_ShadowMap3PosX.z, TextureDepth.r + cfShadowMap1_DAdj_Grad_Enbl0_1.x ) ;
		}

		// 頂点のテクスチャ座標値が範囲内の場合のみ処理する
		if( PSInput.ShadowMap2Pos_ShadowMap3PosY.x < -1.0f || PSInput.ShadowMap2Pos_ShadowMap3PosY.x > 1.0f ||
		    PSInput.ShadowMap2Pos_ShadowMap3PosY.y < -1.0f || PSInput.ShadowMap2Pos_ShadowMap3PosY.y > 1.0f ||
		    PSInput.ShadowMap2Pos_ShadowMap3PosY.z <  0.0f || PSInput.ShadowMap2Pos_ShadowMap3PosY.z > 1.0f )
		{
			ShadowRate.y = 1.0f;
		}
		else
		{
			// 深度テクスチャの座標を算出
			// PSInput.ShadowMap2Pos_ShadowMap3PosX.xy は -1.0f 〜 1.0f の値なので、これを 0.0f 〜 1.0f の値にする
			DepthTexCoord.x = ( PSInput.ShadowMap2Pos_ShadowMap3PosY.x + 1.0f ) / 2.0f;

			// yは更に上下反転
			DepthTexCoord.y = 1.0f - ( PSInput.ShadowMap2Pos_ShadowMap3PosY.y + 1.0f ) / 2.0f;

			// 深度バッファテクスチャから深度を取得
			TextureDepth = tex2D( ShadowMap2Texture, DepthTexCoord );

			// テクスチャに記録されている深度( +補正値 )よりＺ値が大きかったら奥にあるということで減衰率を最大にする
			ShadowRate.y = smoothstep( PSInput.ShadowMap2Pos_ShadowMap3PosY.z - cfShadowMap1_Enb2_ShadowMap2_DAdj_Grad_Enbl0.z, PSInput.ShadowMap2Pos_ShadowMap3PosY.z, TextureDepth.r + cfShadowMap1_Enb2_ShadowMap2_DAdj_Grad_Enbl0.y ) ;
		}

		// 頂点のテクスチャ座標値が範囲内の場合のみ処理する
		if( PSInput.ShadowMap1Pos_ShadowMap3PosX.w < -1.0f || PSInput.ShadowMap1Pos_ShadowMap3PosX.w > 1.0f ||
		    PSInput.ShadowMap2Pos_ShadowMap3PosY.w < -1.0f || PSInput.ShadowMap2Pos_ShadowMap3PosY.w > 1.0f ||
		    PSInput.Fog_ShadowMap3PosZ.y           <  0.0f || PSInput.Fog_ShadowMap3PosZ.y           > 1.0f )
		{
			ShadowRate.z = 1.0f;
		}
		else
		{
			// 深度テクスチャの座標を算出
			// PSInput.ShadowMap1Pos_ShadowMap3PosX.w と PSInput.ShadowMap2Pos_ShadowMap3PosY.w は -1.0f 〜 1.0f の値なので、これを 0.0f 〜 1.0f の値にする
			DepthTexCoord.x = ( PSInput.ShadowMap1Pos_ShadowMap3PosX.w + 1.0f ) / 2.0f;

			// yは更に上下反転
			DepthTexCoord.y = 1.0f - ( PSInput.ShadowMap2Pos_ShadowMap3PosY.w + 1.0f ) / 2.0f;

			// 深度バッファテクスチャから深度を取得
			TextureDepth = tex2D( ShadowMap3Texture, DepthTexCoord );

			// テクスチャに記録されている深度( +補正値 )よりＺ値が大きかったら奥にあるということで減衰率を最大にする
			ShadowRate.z = smoothstep( PSInput.Fog_ShadowMap3PosZ.y - cfShadowMap2_Enbl1_2_ShadowMap3_DAdj_Grad.w, PSInput.Fog_ShadowMap3PosZ.y, TextureDepth.r + cfShadowMap2_Enbl1_2_ShadowMap3_DAdj_Grad.z ) ;
		}
	#else // SHADOWMAP
		ShadowRate.x = 1.0f ;
		ShadowRate.y = 1.0f ;
		ShadowRate.z = 1.0f ;
	#endif // SHADOWMAP


	%Base_3D_PixelLighting_PS_Light.txt%$0$
	%Base_3D_PixelLighting_PS_Light.txt%$1$
	%Base_3D_PixelLighting_PS_Light.txt%$2$
	%Base_3D_PixelLighting_PS_Light.txt%$3$
	%Base_3D_PixelLighting_PS_Light.txt%$4$
	%Base_3D_PixelLighting_PS_Light.txt%$5$






	// 出力カラー計算 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++( 開始 )

	#if TOON != 2
		// TotalDiffuse = ライトディフューズカラー蓄積値 + ( マテリアルのアンビエントカラーとグローバルアンビエントカラーを乗算したものとマテリアルエミッシブカラーを加算したもの )
		TotalDiffuse += cfAmbient_Emissive ;
	#else // TOON != 2
		// アンビエントカラーの蓄積値 += マテリアルのアンビエントカラーとグローバルアンビエントカラーを乗算したものとマテリアルエミッシブカラーを加算したもの
		TotalAmbient += cfAmbient_Emissive.rgb ;
	#endif  // TOON != 2

	#ifdef USE_SPE
		#if TOON
			#if TOON == 1
				// トゥーン１の時の出力計算
				ToonSpecularGradColor = tex2D( ToonSpecularGradTexture, max( TotalSpecular.b, max( TotalSpecular.r, TotalSpecular.g ) ) ) ;
				
				#ifdef USE_SPETEX
					TextureSpecularColor.rgb *= ToonSpecularGradColor.rgb ;
				#else  // USE_SPETEX
					TextureSpecularColor = ToonSpecularGradColor ;
				#endif // USE_SPETEX
				
				TextureSpecularColor.rgb *= tex3D( ToonRGBtoVMaxRGBVolumeTexture, TotalSpecular.rgb ).rgb * PSInput.Specular.rgb ;

				TextureDiffuseColor.rgb *= tex3D( ToonRGBtoVMaxRGBVolumeTexture, TotalLightDiffuse.rgb ).rgb * PSInput.Diffuse.rgb ;

				ToonDiffuseGradColor = tex2D( ToonDiffuseGradTexture, max( TotalDiffuse.b, max( TotalDiffuse.r, TotalDiffuse.g ) ) ) ;

				#if TOON_DIFOP_MUL
					PSOutput.Color0 = TextureDiffuseColor * ToonDiffuseGradColor ;
				#endif // TOON_DIFOP_MUL
				#if TOON_DIFOP_TRANS
					PSOutput.Color0 = lerp( TextureDiffuseColor, ToonDiffuseGradColor, ToonDiffuseGradColor.a ) ;
				#endif // TOON_DIFOP_TRANS

				#if TOON_SPEOP_ADD
					PSOutput.Color0 = PSOutput.Color0 + TextureSpecularColor ;
				#endif // TOON_SPEOP_ADD
				#if TOON_SPEOP_TRANS
					PSOutput.Color0 = lerp( PSOutput.Color0, TextureSpecularColor, TextureSpecularColor.a ) ;
				#endif // TOON_SPEOP_TRANS

				PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a ;

				#if TOON_DIFOP_MUL
					PSOutput.Color0.a *= ToonDiffuseGradColor.a ;
				#endif // TOON_DIFOP_MUL
				
			#else  // TOON == 1
				// トゥーン２の時の出力計算
				ToonDiffuseGradColor = tex2D( ToonDiffuseGradTexture, TotalAngleGen ) ;

				// 出力 = saturate( saturate( アンビエントカラーの蓄積値 + マテリアルのディフューズカラー * ライトのディフューズカラーの蓄積値 ) * テクスチャグラデーションカラー + スペキュラカラー蓄積値 * マテリアルのスペキュラカラー ) * テクスチャカラー
				PSOutput.Color0.rgb = saturate( saturate( TotalDiffuse.rgb * PSInput.Diffuse.rgb + TotalAmbient ) * ToonDiffuseGradColor.rgb + PSInput.Specular.rgb * TotalSpecular.rgb ) * TextureDiffuseColor.rgb ;
				
				#if TOON_SPHEREOP_MUL || TOON_SPHEREOP_ADD
					// スフィアマップの色を取得
					TempF3 = Normal * float3( 0.5f, -0.5f, 0.0f ) + cfZeroHalfOneTwo.yyy ;
					ToonSphereMapColor = tex2D( ToonSphereMapTexture, TempF3.xy ) ;
					
					#if TOON_SPHEREOP_MUL
						// スフィアマップの色を出力に乗算
						PSOutput.Color0.rgb *= ToonSphereMapColor.rgb ;
					#endif // TOON_SPHEREOP_MUL
					
					#if TOON_SPHEREOP_ADD
						// スフィアマップの色を出力に加算
						PSOutput.Color0.rgb += ToonSphereMapColor.rgb ;
					#endif // TOON_SPHEREOP_ADD
					
				#endif // TOON_SPHEREOP_MUL || TOON_SPHEREOP_ADD

				#if TOON_SPHEREOP_MUL

					// 出力アルファ = テクスチャアルファ * Factorアルファ * 頂点アルファ * スフィアマップアルファ
					PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a * ToonSphereMapColor.a ;

				#else // TOON_SPHEREOP_MUL

					// 出力アルファ = テクスチャアルファ * Factorアルファ * 頂点アルファ
					PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a ;

				#endif // TOON_SPHEREOP_MUL

			#endif   // TOON == 1
		#else  // TOON

			#ifdef USE_SPETEX
				// TextureSpecularColor = ライトのスペキュラカラー蓄積値 * スペキュラカラー * スペキュラテクスチャカラー
				TextureSpecularColor = tex2D( SpecularMapTexture, PSInput.TexCoords0_1.xy ) * TotalSpecular * PSInput.Specular ;
			#else  // USE_SPETEX
				// TextureSpecularColor = ライトのスペキュラカラー蓄積値 * スペキュラカラー
				TextureSpecularColor = TotalSpecular * PSInput.Specular ;
			#endif // USE_SPETEX

			// 出力カラー = TotalDiffuse * テクスチャカラー + TextureSpecularColor

			PSOutput.Color0.rgb = TextureDiffuseColor.rgb * TotalDiffuse.rgb + TextureSpecularColor.rgb ;
			PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a ;

		#endif // TOON

	#else  // USE_SPE

		#if TOON
			#if TOON == 1
				ToonDiffuseGradColor = tex2D( ToonDiffuseGradTexture, max( TotalDiffuse.b, max( TotalDiffuse.r, TotalDiffuse.g ) ) ) ;
				TextureDiffuseColor.rgb *= tex3D( ToonRGBtoVMaxRGBVolumeTexture, TotalLightDiffuse.rgb ).rgb * PSInput.Diffuse.rgb ;

				#if TOON_DIFOP_MUL
					// 出力カラー = テクスチャカラー * ディフューズカラー蓄積値 * グラデーションカラー
					PSOutput.Color0 = TextureDiffuseColor * ToonDiffuseGradColor ;
				#endif // TOON_DIFOP_MUL
				#if TOON_DIFOP_TRANS
					// 出力カラー = グラデーションカラー * グラデーションα + ( 1 - グラデーションα ) * ( テクスチャカラー * ディフューズカラー蓄積値 )
					PSOutput.Color0 = lerp( TextureDiffuseColor, ToonDiffuseGradColor, ToonDiffuseGradColor.a ) ;
				#endif // TOON_DIFOP_TRANS

				// 出力α = テクスチャα * ディフューズα * 大域α
				PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a ;

				// 乗算の場合はα値もグラデーションαと乗算する
				#if TOON_DIFOP_MUL
					PSOutput.Color0.a *= ToonDiffuseGradColor.a ;
				#endif // TOON_DIFOP_MUL

			#else	// TOON == 1
				// トゥーン２の時の出力計算
				ToonDiffuseGradColor = tex2D( ToonDiffuseGradTexture, TotalAngleGen ) ;

				// 出力 = ( アンビエントカラーの蓄積値 + マテリアルのディフューズカラー * ライトのディフューズカラーの蓄積値 ) * テクスチャグラデーションカラー * テクスチャカラー
				PSOutput.Color0.rgb = saturate( TotalDiffuse.rgb * PSInput.Diffuse.rgb + TotalAmbient.rgb ) * ToonDiffuseGradColor.rgb * TextureDiffuseColor.rgb ;

				#if TOON_SPHEREOP_MUL || TOON_SPHEREOP_ADD
					// スフィアマップの色を取得
					TempF3 = Normal * float3( 0.5f, -0.5f, 0.0f ) + cfZeroHalfOneTwo.yyy ;
					ToonSphereMapColor = tex2D( ToonSphereMapTexture, TempF3.xy ) ;
					
					#if TOON_SPHEREOP_MUL
						// スフィアマップの色を出力に乗算
						PSOutput.Color0.rgb *= ToonSphereMapColor.rgb ;
					#endif // TOON_SPHEREOP_MUL
					
					#if TOON_SPHEREOP_ADD
						// スフィアマップの色を出力に加算
						PSOutput.Color0.rgb += ToonSphereMapColor.rgb ;
					#endif // TOON_SPHEREOP_ADD
					
				#endif // TOON_SPHEREOP_MUL || TOON_SPHEREOP_ADD

				#if TOON_SPHEREOP_MUL

					PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a * ToonSphereMapColor.a ;

				#else // TOON_SPHEREOP_MUL

					PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a ;

				#endif // TOON_SPHEREOP_MUL

			#endif		// TOON == 1
		#else  // TOON
			// 出力カラー = TotalDiffuse * テクスチャカラー
			PSOutput.Color0.rgb = TotalDiffuse.rgb * TextureDiffuseColor.rgb ;

			// 出力α = テクスチャα * ディフューズα * 大域α
			PSOutput.Color0.a = TextureDiffuseColor.a * cfFactorColor.a * PSInput.Diffuse.a ;
		#endif // TOON

	#endif // USE_SPE

	// フォグ効果
	PSOutput.Color0.rgb = lerp( cfFogColor.rgb, PSOutput.Color0.rgb, saturate( PSInput.Fog_ShadowMap3PosZ.x ) );

	// アルファ乗算カラー
	if( cfMulAlphaColor.x > 0.5f )
	{
		PSOutput.Color0.rgb *= PSOutput.Color0.a;
	}

	// 出力カラー計算 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++( 終了 )


	// ライトを使う場合 *******************************************************************( 終了 )

	return PSOutput ;
}

