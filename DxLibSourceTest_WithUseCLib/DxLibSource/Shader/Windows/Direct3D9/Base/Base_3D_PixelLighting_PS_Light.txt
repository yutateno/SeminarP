
// ライト@0@の処理 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++( 開始 )
#if LG@0@_USE

	#if LG@0@_DIR

		// ライトの方向計算
		lLightDir = cfLight[ @0@ ].Direction ;

	#else  // LG@0@_DIR

		// ライト方向ベクトルの計算
		lLightDir = normalize( PSInput.VPosition.xyz - cfLight[ @0@ ].Position.xyz ) ;

	#endif  // LG@0@_DIR
	

	
	// 距離・スポットライト減衰値計算 =======================================( 開始 )
	#if LG@0@_SPOT || LG@0@_POINT

		// 距離減衰計算 ------------------

		// 頂点とライト位置との距離の二乗を求める
		lLightTemp = PSInput.VPosition.xyz - cfLight[ @0@ ].Position.xyz ;
		lLightDistancePow2 = dot( lLightTemp, lLightTemp ) ;

		// 減衰率の計算 lLightGen = 1 / ( 減衰値0 + 減衰値1 * 距離 + 減衰値2 * ( 距離 * 距離 ) )
		lLightGen = cfZeroHalfOneTwo.z / ( cfLight[ @0@ ].Range_FallOff_AT0_AT1.z + cfLight[ @0@ ].Range_FallOff_AT0_AT1.w * sqrt( lLightDistancePow2 ) + cfLight[ @0@ ].AT2_SpotP0_SpotP1.x * lLightDistancePow2 ) ;

		// --------------------------------


		// スポットライト減衰計算 --------
		#if LG@0@_SPOT

			// ライト方向ベクトルとライト位置から頂点位置へのベクトルの内積( 即ち Cos a )を計算 
			lLightDirectionCosA = dot( lLightDir, cfLight[ @0@ ].Direction ) ;

			// スポットライト減衰計算  pow( falloff, ( ( Cos a - Cos f ) / ( Cos q - Cos f ) ) )
			lLightGen *= saturate( pow( abs( max( lLightDirectionCosA - cfLight[ @0@ ].AT2_SpotP0_SpotP1.y, 0.0f ) * cfLight[ @0@ ].AT2_SpotP0_SpotP1.z ), cfLight[ @0@ ].Range_FallOff_AT0_AT1.y ) ) ;

		#endif // LG@0@_SPOT
		// --------------------------------


		// 有効距離外だったら減衰率を最大にする処理
		lLightGen *= step( lLightDistancePow2, cfLight[ @0@ ].Range_FallOff_AT0_AT1.x ) ;

	#else // LG@0@_SPOT || LG@0@_POINT
	
		lLightGen = 1.0f ;
		
	#endif // LG@0@_SPOT || LG@0@_POINT
	
	// 距離・スポットライト減衰値計算 =======================================( 終了 )

	
	// 影による減衰率算出
	ShadowGen = max( ShadowRate.x, SHADOWMAP1_ENABLE_LGT@0@ ) *
	            max( ShadowRate.y, SHADOWMAP2_ENABLE_LGT@0@ ) *
	            max( ShadowRate.z, SHADOWMAP3_ENABLE_LGT@0@ ) ;


	// ディフューズ色計算

	// ディフューズ角度減衰率計算
	DiffuseAngleGen = saturate( dot( Normal, -lLightDir ) ) ;
	
	#if TOON
		#if TOON == 1
			// トゥーンの場合はこの時点では頂点orマテリアルのディフューズカラーは使用しない
			// ディフューズカラー蓄積値 += ( ライトのディフューズカラー * ディフューズカラー角度減衰率 + ライトのアンビエントカラーとマテリアルのアンビエントカラーを乗算したもの  ) * 距離・スポットライトの角度減衰率
			TempF4 = cfLight[ @0@ ].Diffuse * DiffuseAngleGen ;
			TotalLightDiffuse += TempF4 * lLightGen * ShadowGen ;
			TotalDiffuse += ( TempF4 + cfLight[ @0@ ].Ambient ) * lLightGen ;

		#else // TOON == 1
			// トゥーン２の場合はディフューズカラーとライトの角度減衰は別々に保存しておく
			// ディフューズカラー蓄積値 += ライトのディフューズカラー
			// ライトのアンビエントカラーの蓄積値 += ライトのアンビエントカラー
			// ライトの角度減衰率の蓄積値 += ライトの角度減衰率
			TotalDiffuse += cfLight[ @0@ ].Diffuse ;

			TotalAmbient += cfLight[ @0@ ].Ambient.rgb ;
			TotalAngleGen += DiffuseAngleGen * ShadowGen * lLightGen ;

		#endif // TOON == 1
	#else // TOON
	
		// ディフューズカラー蓄積値 += ( ライトのディフューズカラー * ディフューズカラー * ディフューズカラー角度減衰率 + ライトのアンビエントカラーとマテリアルのアンビエントカラーを乗算したもの  ) * 距離・スポットライトの角度減衰率
		TotalDiffuse += ( cfLight[ @0@ ].Diffuse * PSInput.Diffuse * DiffuseAngleGen * ShadowGen + cfLight[ @0@ ].Ambient ) * lLightGen ;

	#endif // TOON




	// スペキュラカラー計算
	#ifdef USE_SPE

		// ハーフベクトルの計算
		TempF3 = normalize( V_to_Eye - lLightDir ) ;
		
		// Temp = pow( max( 0.0f, N * H ), cfMaterial.Power.x )
		Temp = pow( max( cfZeroHalfOneTwo.x, dot( Normal, TempF3 ) ), cfMaterial.Power.x ) ;

		// スペキュラカラー蓄積値 += Temp * 距離・スポットライトの角度減衰率 * ライトのスペキュラカラー
		TotalSpecular += Temp * lLightGen * cfLight[ @0@ ].Specular * ShadowGen ;

	#endif // USE_SPE


#endif // LG@0@_USE
// ライト@0@の処理 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++( 終了 )








